# Generated by Django 5.1.1 on 2024-09-30 05:42

import django.core.validators
import django.utils.timezone
import identity.managers
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('status', models.BooleanField(default=True, verbose_name='Status')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission', verbose_name='Permissions')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('father_name', models.CharField(blank=True, max_length=150, verbose_name='Father name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('passport_id', models.CharField(help_text='Enter a valid passport ID with letters and numbers.', max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Passport ID must contain only letters and numbers.', regex='^[A-Za-z0-9]+$')], verbose_name='Passport ID')),
                ('phone_number', models.CharField(help_text='Enter the phone number of the user. For example: +994123456789.', max_length=50, verbose_name='Phone number')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('parent', 'Parent'), ('teacher', 'Teacher'), ('operator', 'Operator'), ('director', 'Director')], default='student', max_length=20, verbose_name='User Type')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='M', max_length=1, verbose_name='Gender')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/', verbose_name='Profile Image')),
                ('bio', models.TextField(blank=True, verbose_name='Bio')),
                ('instagram', models.URLField(blank=True, help_text='Enter a valid URL for the Instagram profile.', null=True, validators=[django.core.validators.URLValidator()], verbose_name='Instagram Profile')),
                ('facebook', models.URLField(blank=True, help_text='Enter a valid URL for the Facebook profile.', null=True, validators=[django.core.validators.URLValidator()], verbose_name='Facebook Profile')),
                ('twitter', models.URLField(blank=True, help_text='Enter a valid URL for the Twitter profile.', null=True, validators=[django.core.validators.URLValidator()], verbose_name='Twitter Profile')),
                ('github', models.URLField(blank=True, help_text='Enter a valid URL for the GitHub profile.', null=True, validators=[django.core.validators.URLValidator()], verbose_name='GitHub Profile')),
                ('youtube', models.URLField(blank=True, help_text='Enter a valid URL for the YouTube channel.', null=True, validators=[django.core.validators.URLValidator()], verbose_name='YouTube Channel')),
                ('linkedin', models.URLField(blank=True, help_text='Enter a valid URL for the LinkedIn profile.', null=True, validators=[django.core.validators.URLValidator()], verbose_name='LinkedIn Profile')),
                ('address', models.CharField(blank=True, help_text="Enter the user's address.", max_length=255, verbose_name='Address')),
                ('first_time_login', models.BooleanField(default=True, help_text='Indicates whether the user is logging in for the first time.', verbose_name='First Time Login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('roles', models.ManyToManyField(blank=True, related_name='users', to='identity.role', verbose_name='Roles')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', identity.managers.CustomUserManager()),
            ],
        ),
    ]
